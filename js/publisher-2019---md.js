(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[9],{

/***/ 61:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!--title: 2019 年底-头条面经-->\n<!--date: 2019.12.1-->\n<!--cate: 1-->\n这次面试头条准备得不是很充分，自己面下来也不是很满意。\n\n但是算是给自己的能力找到一个平衡杆，评估了一下自己的能力还差在哪些地方💪。\n\n进入正题。\n\n<!-- more -->\n### 一面\n\n#### 跨域\n\n常规问题，简要说一下：CORS、JSONP、反向代理、iframe。\n\n拓展思考：\n\n- CORS 什么时候会先发 OPTIONS 请求？\n- 为什么淘宝都是大部分请求都是使用 JSONP 而不是 XHR？\n- 什么是反向代理？什么是正向代理？\n\n#### http1 与 http2 区别\n\n我主要回答了 二进制分帧 和 多路复用。更多的还有：首部压缩、服务端推送。\n\nHTTP 2.0 与 HTTP 1.1 的区别[HTTP/2 相比 1.0 有哪些重大改进？](https://www.zhihu.com/question/34074946)\n\n拓展思考：\n\n- 二进制分帧是在什么过程进行处理的？\n- 服务端推送有一个好处即可以缓存，那么如果客户端已经存在一份缓存的时候，服务端还需要 push 吗？\n\n#### https 和 http 对比，加密之外还有什么，证书？\n\n先让我讲了两者区别，我大概讲了一下 SSL、证书 和 非对称加密。\n\n实际上后来我查了一下，感觉自己当时的回答不是很准确。\n\n当时我说回答的大概意思是：https 在 http 的基础上做了一层 ssl 加密，https 首先是需要去注册认证获得证书的，然后证书中包含了公钥和私钥，公钥存储在客户端，客户端通过公钥加密数据传递给服务器端，实现**非对称加密**。\n\n但实际上客户端在检查证书的有效性后，首先会用公钥加密一段**随机值**，然后传递给后端，后端使用私钥解密得到这个**随机值**，然后以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。但是之前的通信都是**对称加密**的。\n\n> 所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容。\n\n另外除了这些区别，还有端口不一样，一个是443，一个80。\n\nHTTPS 与 HTPP[详细解析 HTTP 与 HTTPS 的区别](https://juejin.im/entry/58d7635e5c497d0057fae036)\n\n拓展思考：\n\n- HTTPS 比 HTTP 多用多少服务器资源？（HTTPS除了TCP的三个包，还要加上ssl握手需要的9个包，所以一共是12个包）\n\n#### react diff\n\n常规问题，参考： [深入浅出 React（四）：虚拟 DOM Diff 算法解析](https://www.infoq.cn/article/react-dom-diff)。\n\n拓展思考：\n\n- key 的作用\n- React fiber？React Fiber？[React Fiber是什么](https://zhuanlan.zhihu.com/p/26027085)\n\n#### 事件冒泡 & 事件捕获 & 事件委托 & React 的事件合成机制\n\n事件冒泡、事件捕获、事件委托都很基础，比较简单。\n\n关于 React 的事件合成机制，面试官其实很引导性的问的这个问题，他问我在 React 中一个元素绑定的事件可以阻止原生事件的冒泡吗？答案当然是不能，结合刚才的事件委托，可以知道 React 是将所有的事件委托到顶层再去做的一个分发，而 React 的合成事件的 e.stopPropagation() 是可以阻止合成事件的冒泡，但是不能阻止原生事件的冒泡的。\n\n[React 事件代理与 stopImmediatePropagation](https://github.com/youngwind/blog/issues/107)\n\n[React事件机制 - 源码概览（上）](https://juejin.im/post/5bd32493f265da0ae472cc8e)\n\n#### connect原理，如何实现全局的 store 获取\n\n高阶组件，props 劫持，全局的 context\n\n拓展思考：\n\n- 高阶组件的作用：[React 高阶组件(HOC)入门指南](https://juejin.im/post/5914fb4a0ce4630069d1f3f6)\n\n#### redux 的好处\n\n这里我主要回答了一下单向数据流以及全局的状态管理。\n\n拓展思考：\n\n- redux 的缺点\n\n#### react 和 vue的区别\n\n常规问题：一个是 MVC 一个只是 View层；还有数据双向绑定等。\n\n#### 前端安全问题，如何防范\n\nXSS 和 CSRF[前端安全知识](https://juejin.im/post/59dc2b7a6fb9a0451869ae3a)\n\n#### 两列布局\n\n- flex\n- calc 结合 float\n- calc 结合绝对定位\n- 网格 grid 布局：[网格布局](https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)\n\n#### flex-grow、flex-shrink 的含义\n\n当空间有剩余时的放大比例，当空间不足时的缩小比例\n\n#### 5张牌 检查是不是顺子\n\n当时思路：找出5张里面大小王数量jokerNum；找出非王牌cards并排序；for循环从i = 1开始，检查与上一张牌是否相差1，不相差1再用王补位，相差几位补几位，如果还没遍历完且存在不连续的情况，王就用完了，说明不是顺子。\n\n#### toSum\n\n- 暴力解法\n- 哈希表\n- 排序后双指针\n\n### 二面\n\n一面完了之后，面试官就让我等一下和二面面试官协商一下。等了一会儿就开始二面了。\n\n开始二面自己还暗暗开心自己一面过了，可是我觉得我高兴得太早了，二面真的是难到我了😢。自己不懂的太多了。\n\n#### 渐进式图片\n\n我的简历上写了项目中使用图片懒加载的方式提升页面的性能，所以面试官问我知道渐进式图片吗？虽然听说过，但是由于自己没有实现过，所以只能说不知道。然后面试官让我当场思考一下如何做，然后我瞎扒拉一下，所图片压缩不同等级的大小再加载。\n\n这一块我还比较在意，所以下来之后自己也尝试实现了一下渐进式图片。\n\n效果可以看：[渐进式图片例子](https://sycamore.fun/#/display/progressive)，虽然不是很完美，嘻嘻。\n\n背景：通常网页的图片加载方式是自上而下的，而渐进式图片的效果是图片从模糊变清晰的一个过程，对用户更加友好。\n\n实现核心：\n\n1. 压缩一个很小的图片称为 image_small，就是可以看到像素化那种\n2. 然后在页面进入的时候，先加载这个小图，将图片实际大小的 url（称为 image_large）存储在自定义属性 data-* 中备用\n3. 因为 image_small 像素化是肉眼可见的，使用 css 的 `filter: blur(1vw);` 模糊化，实际只能看见图片的轮廓即可\n4. 当图片滚入浏览器可视范围的时候，再去加载 image_large\n5. image_large 加载完成之后插入到 dom，这个时候在删除或者透明化 image_small\n\n#### 如何实现图片裁剪\n\n也是和上个问题关联的，之前其实有看过，也是没有自己动手做。\n\n要实现的关键点有两个：\n\n1. 使用 canvas 的 drawImage API\n2. 使用 canvas 的 toDataURL API\n\n#### ts的infer，never，unknown\n\n自己用 TS 主要是一些基础的类型定义，所以这里答的不好。\n\ninfer 是在 extends 条件语句中待推断的类型变量。\n\nnever 表示永远不会有发生的类型，例如无限循环、try/catch等。\n\nunknown：https://www.cnblogs.com/Wayou/p/typescript_unknown_type.html\n\n\n\n其实我感觉面试官问我 infer 不仅仅是想问我 infer 的含义，可能还会问其他的问题，只是因为我不知道，所以进行不下去。\n\ninfer 的更多尝试可以看看 LeetCode 的 TS 题目：[编写复杂的 Typescript 类型](https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md)\n\n#### react 16.9的Supense\n\nhttp://www.ayqy.net/blog/react-suspense/\n\n#### koa router的实现原理\n\n天呐，nodejs 这部分自己的掌握太基础了，所以我只能说不知道。https://www.jianshu.com/p/b6d52427954f\n\n#### window scroll 如何优化，手写节流\n\nscroll 优化就是节流。\n\n```\nfunction throltte(fn, delay) {\n\tlet canRun = true;\n\t\n\treturn function() {\n\t\tif (!canRun) return;\n\t\tcanRun = false;\n\t\t\n\t\tsetTimeout(() => {\n\t\t\tfn.apply(this, arguments);\n\t\t\tcanRun = true;\n\t\t}, delay);\n\t}\n}\n```\n\n写完之后面试官直接问我，这里都用了箭头函数了，还需要 apply 吗？\n\n然后我思考了一下，确实不需要，下来之后自己也测试了一下。\n\n#### saga中间件实现原理\n\n当时简单回答了一下类似于洋葱圈模型的中间件流转流程，但是面试官说光是懂这个流程还是有些欠缺，要自己真的动手去做过才能掌握其中的原理。\n\n#### 为什么用dva\n\n当时自己回答得很模棱两可，实际上面试官想问的是 dva 的缺点，关于这个可以和 mobx 对比起来回答。\n\n#### 做题：\n\ns = \"3[a]2[bc]\", 返回 \"aaabcbc\".\n\ns = \"3[a2[c]]\", 返回 \"accaccacc\".\n\ns = \"2[abc]3[cd]ef\", 返回 \"abcabccdcdcdef\".\n\n解决：\n\n- 中缀表达式\n- 递归\n\n\n\n### 三面\n\n#### 为什么想换工作？\n\n很简单，根据自己的情况回答。\n\n#### JSX 是什么？手写 JSX 转换成对象的方法？AST 对象语法树？\n\n简单说了下 JSX 是 JS 的语法扩展，是 React.createElement() 的语法糖，可以让我们更加快捷且可视化的写 React 的组件代码逻辑。JSX 被编译之后会变成对象类型的数据，里面包含了组件类型、组件属性、子组件等信息。\n\n但是手写 jsx 转换成对象这个我不太会，就直接和面试官口述了一个不靠谱的方法，就是用正则去匹配之类的。但实际不是这样的。\n\n实际上 JSX 是被 babel 转换处理的，而 babel 的原理就是一个编译器，babel  编译器经过解析、变换和再建三个步骤，得到 React.createElement() 对应的代码字符串。\n\n#### Jsx 转换成对象类型的结构发生在什么阶段\n\n面试官问我这个问题的时候，我实际上进入了一个误区，第一反应以为他问的是在什么生命周期发生的，但是这是错误的。\n\n因为 JSX 转换成 React.createElement() 是发生在编译阶段的，会先编译成 React.createElement() 形式，再进行后续的处理。\n\n#### 说下webpack常用的loader和plugin，他们分别发生在什么阶段\n\nloader 我主要说了常用的 css-loader、style-loader、less-loader、url-loader等，然后 plugin 当时太紧张了说了 cleanWebpackPlugin。\n\n然后发生在什么阶段：我回答 loader 主要发生在编译阶段，当所编译的文件不是 webpack 能识别的文件类型时，就需要通过 loader 来进行转换。而 plugin 则可以发生在任何阶段，例如编译之后的生成 html 的 plugin，编译前清理 dist 的插件，和编译中的压缩处理插件等。\n\n但后来又觉得自己理解的还不够深入，所以去查了一下\n\n参考：[第 148 题： webpack 中 loader 和 plugin 的区别是什么](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308)\n\n#### TS的泛型，解决了什么问题\n\nTS 使用`泛型`来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。\n\n#### H5拖拽，React-dnd是什么，了解过源码吗\n\nH5 原生的拖拽原理，对需要拖拽的元素绑定 `dragable` 属性，监听 `onDrag` 事件；对可以放置的元素绑定 `onDrop` 事件，然后再进行相应处理即可。\n\nReact-Dnd 是一个封装好的拖拽库，主要是把拖拽相关的 UI 层面的逻辑做了封装处理，让使用者集中关注数据的流转，将复杂的拖拽问题转换成了数据的变化操作处理。\n\n源码没看过😂。\n\n#### 上传文件协议发生了什么；文件没上传完时，协议中如何标识；node 端怎么接受文件，content-type是什么\n\n这个问题，正好前段时间自己正好实践过，所以回答得好可以。\n\n上传文件时，前端一般使用 form-data 的方式实现文件上传，然后HTTP 的请求头中会生成一个 `--boundary=xxx` 来标识多个表单项之间的分隔符；分割得到的表单项中， `Content-Disposition` 包含了表单项的基本信息，而文件类型的表单项中则会包含多一个 filename 信息，后端通过分析请求报文，使用  `--boundary=xxx` 进行分割处理就可以得到文件的内容，最后进行存储。\n\ncontent-type 是 multiple-part/form-data。\n\n文件没上传完成时，协议中如何标识？\n\n后续实践后更新。\n\n拓展思考：\n\n- 下载大文件时，协议中如何标识？（隐约记得 HTTP 头部有个 `Content-MD5` 字段）\n\n#### Node 端如何等待数据库操作；数据库连接失败后要做什么，怎么通知前端？连接池的原理？\n\n通过 async/await。\n\n数据库连接失败需要设置连接池进行重新连接尝试，并打印日志到后台方便错误排查。当时没想清楚怎么通知前端，后来想到了，连接失败之后可以在每个接口的时候通知前端。\n\n连接池的原理没回答上。\n\n[数据库连接池的实现原理？](https://www.zhihu.com/question/48872110)\n\n#### 多端适配的方案，dpr是什么意思\n\n[移动端开发适配](https://sycamore.fun/#/blog/33f38c9744282a3007c859346b4eaaa9)");

/***/ })

}]);
//# sourceMappingURL=publisher-2019---md.js.map