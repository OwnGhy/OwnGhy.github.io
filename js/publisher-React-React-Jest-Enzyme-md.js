(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[12],{

/***/ 53:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!--title: React单元测试记录之Jest 与 Enzyme-->\n<!--date: 2018.8.24-->\n<!--cate: 1-->\n\n### 学习以及参考文章\n官方：\n1. [Jest文档](https://jestjs.io/docs/en/getting-started)\n2. [Enzyme文档](https://airbnb.io/enzyme/)\n3. [React官方测试说明](https://doc.react-china.org/docs/test-renderer.html)\n4. [JEST 官方对于React测试的说明](https://jestjs.io/docs/en/tutorial-react)\n\n<!-- more -->\n\n教程：\n1. [对React组件进行单元测试](https://juejin.im/post/5a71413e5188252edb593020#heading-28)，主要包括一些概念、工具、测试思想和测试方法的说明与理解\n2. [基于 Jest + Enzyme 的 React 单元测试](https://juejin.im/post/59019ac8b123db260cc6ae91)，主要是对于一个测试流程的整理和记录\n3. [利用 Jest 为 React 组件编写单元测试](https://juejin.im/entry/5b1691a06fb9a01e38212ed2)，利用React比较原始的API进行测试\n\n### 前言\n本文基于[基于 Jest + Enzyme 的 React 单元测试](https://juejin.im/post/59019ac8b123db260cc6ae91)教程进行尝试，测试的项目基于dva，因为参考的教程应该不是基于dva的，所以与本项目的测试会有一定的差别，也就存在了问题。本文总结了在上述配置环境下使用Jest&Enzyme进行测试遇到的问题和需要增加的配置。主要的实现路径由简到繁，如下述测试用例所示。\n\n### 测试用例记录\n1. 测试无状态组件传入props是否传入正常（属性和方法）\n2. 功能函数输入输出是否达预期测试\n3. 非无状态组件的点击事件测试\n4. reducer和effect测试\n\n### 遇到的问题以及解决办法\n#### 1. babel未preset react\n报错：\n```\nJest encountered an unexpected token\n      This usually means that you are trying to import a file which Jest cannot parse, e.g. it's not plain JavaScript.\n      By default, if Jest sees a Babel config, it will use that to transform your files, ignoring \"node_modules\".\n    \n    ...\n    \n> 12 |     const wrapper = shallow(<TaskDescription {...props} />);\n     |                             ^\n```\n这里主要是因为Jest无法解析Jsx文件导致的错误，需要在babel中配置preset中加入react:\n```\n\"babel\": {\n    \"env\": {\n      \"test\": {\n        \"presets\": [\n          \"env\",\n          \"react\"\n        ]\n      }\n    }\n  }\n```\n\n#### 2. enzyme版本问题\n```\nEnzyme Internal Error: Enzyme expects an adapter to be configured, but found none. To\n          configure an adapter, you should call `Enzyme.configure({ adapter: new Adapter() })`\n          before using any of Enzyme's top level APIs, where `Adapter` is the adapter\n          corresponding to the library currently being tested. For example:\n\n          import Adapter from 'enzyme-adapter-react-15';\n\n          To find out more about this, see http://airbnb.io/enzyme/docs/installation/index.html\n\n      10 |     }\n      11 | \n    > 12 |     const wrapper = shallow(<TaskDescription {...props} />);\n         |                     ^\n```\n参考解决办法：[Could not find declaration file for enzyme-adapter-react-16?](https://stackoverflow.com/questions/46435558/could-not-find-declaration-file-for-enzyme-adapter-react-16)\n```\nnpm install enzyme-adapter-react-16 -D\n\n// 对enzyme添加adapter，在对应的测试用例之中\nimport * as enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nenzyme.configure({ adapter: new Adapter() });\n```\n\n#### 3. 断言库语法错误\n参考解决办法：[TypeError: Cannot read property 'equal' of undefined\n](https://stackoverflow.com/questions/39926517/typeerror-cannot-read-property-equal-of-undefined)\n报错如下：\n```\nTypeError: Cannot read property 'equal' of undefined\n```\n代码如下：\n```\nexpect('test').innerText).to.equal(props.title);\n```\n主要的错误是Jest使用的自带的断言库，但是上面的断言语法是chai.js的。\n\n所以把to.equal()改为toEqual()即可。\n详细的语法参考：[Jest Expect](https://jestjs.io/docs/en/expect)。\n\n#### 4. 测试封装的组件中包含其他组件的情况不能使用shallow浅渲染进行测试\n代码如下，使用enzyme的shallow进行浅渲染，即渲染虚拟DOM\n```\nimport React from 'react';\nimport TaskDescription from './../src/components/OkrUpdate/TaskDescription';\nimport * as enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nenzyme.configure({ adapter: new Adapter() });\n\nconst setup = () => {\n    // 模拟props\n    const props = {\n        title: 'test',\n        content: '123content'\n    }\n\n    const wrapper = enzyme.shallow(<TaskDescription {...props} />);\n    return {\n        props,\n        wrapper\n    };\n}\n\ndescribe('TaskDescription', () => {\n    const { wrapper, props } = setup();\n    console.log(wrapper.text());\n    it('TaskDescription component should render', () => {\n        expect(wrapper.contains(props.title)).toEqual(true);\n    });\n})\n```\n最后我们打印出来的wrapper.text()的内容如下：\n```\nconsole.log __test__/PureCompoents.spec.js:24\n    <Card />\n```\n这的问题是因为浅渲染不能渲染出引用的组件，导致无法获取相应的信息。所以对于在测试的组件中还使用了其他组件的情况不能使用shallow进行测试，而使用mount，如下：\n```\nconst wrapper = enzyme.mount(<TaskDescription {...props} />);\n```\n\n备注：另一种方法是使用shallow的dive()方法进行深层次的渲染，但是dive()一次只能渲染一层，如果是嵌套多层的组件，需要多次dive()。\n\n#### 5. Jest不支持ES6语法\n参考解决办法：[JEST不支持ES6语法解决办法](http://www.voidcn.com/article/p-ceessvhb-bnv.html)\n\n报错:\n```\nThis usually means that you are trying to import a file which Jest cannot parse, e.g. it's not plain JavaScript.\n      By default, if Jest sees a Babel config, it will use that to transform your files, ignoring \"node_modules\".\n      Here's what you can do:\n       • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n       • If you need a custom transformation specify a \"transform\" option in your config.\n       • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n      You'll find more details and examples of these config options in the docs:\n\n    ...\n\n    callback = () =>{\n             ^\n    }\n\n```\n问题在于JEST无法识别函数简写语法。\n\n解决办法：\n```\nnpm install --save-dev babel-preset-stage-2\n```\n修改package.json的babel配置：\n```\n  \"babel\": {\n    \"env\": {\n      \"test\": {\n        \"presets\": [\n          \"env\",\n          \"react\",\n          \"stage-2\"\n        ]\n      }\n    }\n  }\n```\n\n#### 6. JEST不支持ES6---装饰器\n报错：\n```\n/Users/xxx/tap4fun/project/bonus-fe/src/routes/Employees/index.js: Decorators are not officially supported yet in 6.x pending a proposal update.\n    However, if you need to use them you can install the legacy decorators transform with:\n\n    npm install babel-plugin-transform-decorators-legacy --save-dev\n\n    and add the following line to your .babelrc file:\n\n    {\n      \"plugins\": [\"transform-decorators-legacy\"]\n    }\n```\n解决办法：\n```\nnpm install babel-plugin-transform-decorators-legacy --save-dev\n```\n修改babel配置：\n```\n{\n    \"plugins\": [\"transform-decorators-legacy\"]\n}\n\n```\n\n#### 7. import语法报错---之antd内部的ES6语法无法解析\n参考解决办法：[Unexpected token 'import' error while running Jest tests?](https://stackoverflow.com/questions/51127176/unexpected-token-import-error-while-running-jest-tests/51224088)\n\n报错：\n```\n/Users/xxx/tap4fun/project/bonus-fe/node_modules/antd/es/upload/utils.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,global,jest){import _extends from 'babel-runtime/helpers/extends';\n                                                                                             ^^^^^^\n\n    SyntaxError: Unexpected token import\n```\n从上面可以看到，报错的位置是在node_modules内部的antd的错误，这里个人理解的原因是（emm...可能不准确）：Jest运行时虽然配置了babel语法解析的环境，但是当进行深层解析到antd的内部代码是不能使用babel解析。\n\n解决办法：使用Jest的配置参数transformIgnorePatterns去忽略需要忽略的模块。在Jest的config中加入以下代码：\n```\n\"transformIgnorePatterns\": [\"/node_modules/(?!antd)\"]\n```\n#### 8. 关于测试组件中使用了路由和dva导致的错误---注册应用之后进行测试\n这里出现这个问题是这样的场景：emm...就是想测组件内部的点击事件嘛，然后这个组件用到了路由history什么的，然后它就报错了，找不到history。\n\n参考解决办法：[组件内部有监听路由变化的逻辑](http://jacelynfish.top/)\n\n然后我参考上面的链接中的【组件内部有监听路由变化的逻辑】部分，emm...了解了要跑整个项目的测试大概是需要在测试的时候注册整个应用吧，这样才能使用路由、redux等。\n\n在测试中注册应用的方式大概就和开发项目注册应用的方式相同：\n```\nimport React from 'react';\nimport dva from 'dva';\nimport * as enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport createLoading from 'dva-loading';\n\nenzyme.configure({ adapter: new Adapter() });\n\nlet app, wrapper;\nbeforeAll(() => {\n    app = dva();\n    app.use(createLoading());\n    app.model(require('./../src/models/task_okr_update').default);\n    app.router(require('./router').default);\n    let App = app.start();\n    wrapper = enzyme.mount(<App />);\n});\n```\n这样使用enzyme挂载的wrapper就包括了整个应用，整个应用就可以进行测试。这样的又一个问题是，会不会使测试变得十分笨重，那么在配置路由的时候，可以只配置需要测试的路由组件。如下：\n```\nimport React, { Component } from 'react';\nimport { Router, Route, Switch } from 'dva/router';\nimport OkrRejectUpdate from './../src/routes/Task/OkrRejectUpdate';\n\nfunction RouterConfig({ history }) {\n    return (\n        <Router history={history}>\n            <AllRoutes />\n        </Router>\n    );\n}\n\nclass AllRoutes extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={OkrRejectUpdate} />\n                <Route exact path=\"/other\" render={<div>other path</div>} />\n            </Switch>\n        );\n    }\n}\n\nexport default RouterConfig;\n```\n但是这样的话每写一个测试就需要多写一个路由配置和应用注册，就很麻烦，至于选哪一种方式还需要进一步的考虑（太菜了...分不清哪样更好）。\n\n#### 9. webpack别名在Jest不能识别\n这里的原因是在webpack中配置了别名以便访问更加便捷。但是在Jest中没有webpack的别名配置，当然不能访问别名，所以导致错误。\n\n解决办法，在package.json中配置jest如下，加上别名的配置。\n```\n\"jest\": {\n    \"moduleFileExtensions\": [\n        \"js\",\n        \"jsx\"\n    ],\n    \"moduleNameMapper\": {\n        \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/__mocks__/fileMock.js\",\n        \".*\\\\.(css|less|scss)$\": \"<rootDir>/__mocks__/styleMock.js\",\n        \"^@styles(.*)$\": \"<rootDir>/src/components/styles$1\",\n        \"^@components(.*)$\": \"<rootDir>/src/components$1\",\n        \"@utils(.*)$\": \"<rootDir>/src/utils$1\"\n    },\n    \"transform\": {\n        \"^.+\\\\.(js|jsx)$\": \"babel-jest\"\n    },\n    \"transformIgnorePatterns\": [\n        \"/node_modules/(?!antd)\"\n    ]\n},\n```\n\n### mock dva方式替换注册应用方式\n前面提到的通过注册应用的方式来解决jest无法使用dva相关的属性的问题，对于测试来说过于的笨重，测试应该尽量的做到轻量以及高效。这里用第二种方法来解决这个问题---mock dva。\n\n在__mocks__文件中新建dva.js，写入如下内容，其核心是使用jest的genMockFromModule()接口对dva进行mock，并在写入dva需要的一些属性和方法。\n```\nconst React = require('react');\nconst dva = jest.genMockFromModule('dva');\n\ndva.connect = () => WrappedComponent =>\n    class Connect extends React.Component {\n        render() {\n            const props = {\n                subscribe: f => f,\n                dispatch: f => f,\n                getState: f => f,\n                history: {},\n                match: {},\n                ...this.props\n            };\n            return <WrappedComponent {...props} />;\n        }\n    };\nmodule.exports = dva;\n```\n然后在jest config中配置dva的mock路径。\n```\n\"^dva$\": \"<rootDir>/__mocks__/dva.js\"\n```\n注意：需要注意的是，如果对应测试的组件中使用到了dispatch的回调then的话，这与我们上面mock的dispatch方法相冲突，f => f是没有回调的，在对应的组件中通过props中复写diapatch来解决这个问题。\n```\ndispatch: () => Promise.resolve({}),\n```\n\n### reducer和effect测试\n参考：[添加了几个复杂场景的demo，增加了单元测试](https://github.com/dvajs/dva-example-user-dashboard/pull/15/commits/df7b5fed8fe9a778b9f802a6a9944192cc1a80bb)\n\nreducer是纯函数，对于固定的输入得到固定的输出，所以对于reducer的测试就是传入测试数据并判断输出是否为预期即可。\n\n对于effect的测试，引用下面这段话：\n> 所谓的单元测试，其实要测试的是某个函数自身的逻辑是否全被覆盖，像在一个effect中对外部服务（比如网络请求）的调用，这些外部服务的执行过程其实与本模块的单元测试无关，因此，我们只需要验证这件事：\n> \n> 是否发起了对某个服务的调用\n>\n> 至于说，这个服务是否在执行，无关于本模块的正确性，那是这个服务的单元测试要做的事。所以这么一来，一个effect实际上是转化为同步逻辑的测试，因为它是一个generator函数，只需对这个effect一路next，就能跑完整个逻辑。\n\n\n对redux-saga的测试是这样的原理，而dva是对redux-saga的封装，这块的机制是一致的，所以我们可以用同样的方式，从model对象中获取reducer和effect，分别编写测试用例。\n\n\n### 优化\n\n1. 将package.json中的jest配置单独提取出来，使用jest --config=jest.config.js的方式读取配置。\n2. 提取enzyme的adapter配置。\n3. mock dva，避免在测试中重新注册应用。");

/***/ })

}]);
//# sourceMappingURL=publisher-React-React-Jest-Enzyme-md.js.map